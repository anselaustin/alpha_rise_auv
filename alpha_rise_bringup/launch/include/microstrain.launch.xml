<?xml version="1.1"?>
<launch>

  <!-- Standalone example launch file for GX3, GX4, GX/CX5, RQ1 and GQ7 series devices-->
  <!-- Note: Feature support is device-dependent and some of the following settings may have no affect on your device. -->
     <!--  Please consult your device's documentation for supported features -->

  <!-- Declare arguments with default values -->
  <arg name="robot_name" default="changeme"/>
  <!-- <arg name="name"            default = "gx5" /> -->
  <arg name="port"            default = "/dev/ttyACM1" />
  <arg name="baudrate"        default = "115200" />
  <arg name="debug"           default = "false" />
  <arg name="diagnostics"     default = "false" />
  <arg name="imu_frame_id"    default = "imu" />
  <arg name="use_enu_frame"   default = "true" />
  <arg name="filter_frame_id" default = "sensor_wgs84" />

  <!-- ****************************************************************** -->
  <!-- Microstrain sensor node -->
  <!-- ****************************************************************** -->

  <node ns="$(arg robot_name)" name="ros_mscl_node" pkg="ros_mscl" type="ros_mscl_node" output="screen">

    <!-- ****************************************************************** -->
    <!-- General Settings -->
    <!-- ****************************************************************** -->

    <param name="port"     value="$(arg port)"     type="str" />
    <param name="baudrate" value="$(arg baudrate)" type="int" />
    <!-- Controls if the driver outputs data with-respect-to ENU frame
          false - position, velocity, and orientation are WRT the NED frame (native device frame)
          true  - position, velocity, and orientation are WRT the ENU frame
     -->

    <param name="use_enu_frame" value="$(arg use_enu_frame)" type="bool" />

    <!-- Controls if the driver-defined setup is sent to the device
          false - The driver will ignore the settings below and use the device's current settings
          true  - Overwrite the current device settings with those listed below
     -->
    <param name="device_setup" value="true" type="bool" />

    <!-- Controls if the driver-defined settings are saved
          false - Do not save the settings
          true  - Save the settings in the device's non-volatile memory
     -->

    <param name="save_settings" value="false" type="bool" />

    <!-- Controls if the driver uses the device generated timestamp (if available) for timestamping messages
          false - Use PC received time for timestamping
          true  - Use device generated timestamp
     -->
    <param name="use_device_timestamp" value="false" type="bool" />

    <!-- Controls if the driver creates a raw binary file
          false - Do not create the file
          true  - Create the file

          Notes: 1) The filename will have the following format -
                    model_number "_" serial_number "_" datetime (year_month_day_hour_minute_sec) ".bin"
                    example: "3DM-GX5-45_6251.00001_20_12_01_01_01_01.bin"
                 2) This file is useful for getting support from the manufacturer
     -->

    <param name="raw_file_enable" value="false" type="bool" />


    <!-- (GQ7 only) Controls if the driver requests additional factory support data to be included in the raw data file
          false - Do not request the additional data
          true  - Request the additional channels

          Notes: Including this feature increases communication bandwidth requirements... for serial data connections,
                 please ensure the baudrate is sufficient for the added data channels.
     -->

    <param name="raw_file_include_support_data" value="false" type="bool" />

    <!-- The directory to store the raw data file (no trailing '/')-->

    <param name="raw_file_directory" value="/home/your_name" type="str" />


    <!-- ****************************************************************** -->
    <!-- IMU Settings -->
    <!-- ****************************************************************** -->

    <param name="publish_imu"   value="true"                  type="bool" />
    <param name="imu_data_rate" value="100"                   type="int" />
    <param name="imu_frame_id"  value="$(arg robot_name)/$(arg imu_frame_id)"   type="str" />

    <!-- Static IMU message covariance values (the device does not generate these) -->
    <!-- Since internally these are std::vector we need to use the rosparam tags -->
    <rosparam param="imu_orientation_cov"> [0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1]</rosparam>
    <rosparam param="imu_linear_cov">      [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
    <rosparam param="imu_angular_cov">     [0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.01]</rosparam>
    

    <!-- ****************************************************************** -->
    <!-- Kalman Filter Settings (only applicable for devices with a Kalman Filter) -->
    <!-- ****************************************************************** -->

    <param name="publish_filter"       value="false"                   type="bool" />
    <param name="filter_data_rate"     value="100"                     type="int" />
    <param name="filter_frame_id"      value="$(arg filter_frame_id)" type="str" />

    <!-- If enabled, this message can be used to validate time IMU time syncronzation with gps -->
    <!-- It is most useful when using an external timesource and external PPS-->
    <!-- (see: filter_enable_external_gps_time_update) -->
    <param name="publish_gps_corr"  value="false" type="bool" />

  </node>


  <!-- ****************************************************************** -->
  <!-- Diagnostics -->
  <!-- ****************************************************************** -->

  <group if="$(arg diagnostics)">

    <!-- Diagnostic Aggregator for robot monitor usage -->
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="imu_diagnostic_aggregator">
      <rosparam command="load" file="$(find ros_mscl)/config/diagnostic_analyzers.yaml" />
    </node>
  </group>


  <!-- ****************************************************************** -->
  <!-- Set the debug level to debug -->
  <!-- ****************************************************************** -->

  <group if="$(arg debug)">
    <env name="ROSCONSOLE_CONFIG_FILE"
       value="$(find ros_mscl)/config/custom_rosconsole.conf"/>
  </group>
</launch>
